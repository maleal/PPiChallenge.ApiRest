// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PPiChallenge.Infrastructure.DataBaseIttion;

#nullable disable

namespace PPiChallenge.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PPiChallenge.Core.Entities.ActivoFinanciero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ComisionPorcentaje")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("ImpuestoPorcentaje")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("PrecioSeRecibe")
                        .HasColumnType("bit");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("TipoActivoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoActivoId");

                    b.ToTable("activoFinancieros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComisionPorcentaje = 0m,
                            Nombre = "Apple",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 177.97m,
                            Ticker = "AAPL",
                            TipoActivoId = 1
                        },
                        new
                        {
                            Id = 2,
                            ComisionPorcentaje = 0m,
                            Nombre = "Alphabet Inc",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 138.21m,
                            Ticker = "GOOGL",
                            TipoActivoId = 1
                        },
                        new
                        {
                            Id = 3,
                            ComisionPorcentaje = 0m,
                            Nombre = "Microsoft",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 329.04m,
                            Ticker = "MSFT",
                            TipoActivoId = 1
                        },
                        new
                        {
                            Id = 4,
                            ComisionPorcentaje = 0m,
                            Nombre = "Coca Cola",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 58.30m,
                            Ticker = "KO",
                            TipoActivoId = 1
                        },
                        new
                        {
                            Id = 5,
                            ComisionPorcentaje = 0m,
                            Nombre = "Walmart",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 163.42m,
                            Ticker = "WMT",
                            TipoActivoId = 1
                        },
                        new
                        {
                            Id = 6,
                            ComisionPorcentaje = 0m,
                            Nombre = "BONOS ARGENTINA USD 2030 L.A",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 307.40m,
                            Ticker = "AL30",
                            TipoActivoId = 2
                        },
                        new
                        {
                            Id = 7,
                            ComisionPorcentaje = 0m,
                            Nombre = "Bonos Globales Argentina USD Step Up 2030",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 336.10m,
                            Ticker = "GD30",
                            TipoActivoId = 2
                        },
                        new
                        {
                            Id = 8,
                            ComisionPorcentaje = 0m,
                            Nombre = "Delta Pesos Clase A",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 0.0181m,
                            Ticker = "Delta.Pesos",
                            TipoActivoId = 3
                        },
                        new
                        {
                            Id = 9,
                            ComisionPorcentaje = 0m,
                            Nombre = "Fima Premium Clase A",
                            PrecioSeRecibe = true,
                            PrecioUnitario = 0.0317m,
                            Ticker = "Fima.Premium",
                            TipoActivoId = 3
                        });
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.Cuenta", b =>
                {
                    b.Property<int>("IdCuenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCuenta"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Moneda")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdCuenta");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            IdCuenta = 1,
                            Email = "admin@ppi.com",
                            IsEnabled = true,
                            Moneda = "ARS",
                            PasswordHash = "admin123",
                            Saldo = 100000m,
                            Usuario = "admin"
                        });
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.EstadoOrden", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DescripcionEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstadoOrden");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DescripcionEstado = "En proceso"
                        },
                        new
                        {
                            Id = 2,
                            DescripcionEstado = "Ejecutada"
                        },
                        new
                        {
                            Id = 3,
                            DescripcionEstado = "Cancelada"
                        });
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.Orden", b =>
                {
                    b.Property<int>("IdOrden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrden"));

                    b.Property<int>("ActivoFinancieroId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("Comision")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Impuesto")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("MontoTotal")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Operacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("IdOrden");

                    b.HasIndex("ActivoFinancieroId");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Orden");
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.TipoActivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoActivo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Accion"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Bono"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "FCI"
                        });
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.ActivoFinanciero", b =>
                {
                    b.HasOne("PPiChallenge.Core.Entities.TipoActivo", "TipoActivo")
                        .WithMany()
                        .HasForeignKey("TipoActivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoActivo");
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.Orden", b =>
                {
                    b.HasOne("PPiChallenge.Core.Entities.ActivoFinanciero", "ActivoFinanciero")
                        .WithMany("Ordenes")
                        .HasForeignKey("ActivoFinancieroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PPiChallenge.Core.Entities.Cuenta", null)
                        .WithMany("Ordenes")
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivoFinanciero");
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.ActivoFinanciero", b =>
                {
                    b.Navigation("Ordenes");
                });

            modelBuilder.Entity("PPiChallenge.Core.Entities.Cuenta", b =>
                {
                    b.Navigation("Ordenes");
                });
#pragma warning restore 612, 618
        }
    }
}
